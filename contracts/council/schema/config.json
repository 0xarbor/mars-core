{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "description": "Council global configuration",
  "type": "object",
  "required": [
    "address_provider_address",
    "proposal_effective_delay",
    "proposal_expiration_period",
    "proposal_required_deposit",
    "proposal_required_quorum",
    "proposal_required_threshold",
    "proposal_voting_period"
  ],
  "properties": {
    "address_provider_address": {
      "description": "Address provider returns addresses for all protocol contracts",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "proposal_effective_delay": {
      "description": "Blocks that need to pass since a proposal succeeds in order for it to be available to be executed",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "proposal_expiration_period": {
      "description": "Blocks after the effective_delay during which a successful proposal can be activated before it expires",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "proposal_required_deposit": {
      "description": "Number of Mars needed to make a proposal. Will be returned if successful. Will be distributed between stakers if proposal is not executed.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "proposal_required_quorum": {
      "description": "% of total voting power required to participate in the proposal in order to consider it successfull",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "proposal_required_threshold": {
      "description": "% of for votes required in order to consider the proposal successful",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "proposal_voting_period": {
      "description": "Blocks during which a proposal is active since being submitted",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
